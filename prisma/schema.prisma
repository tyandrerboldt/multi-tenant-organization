// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  preferences   UserPreferences?
}

enum Role {
  OWNER
  MEMBER
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum Theme {
  light
  dark
  system
}

model Organization {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  plan                 Plan              @default(FREE)
  stripeCustomerId     String?           @unique
  stripeSubscriptionId String?           @unique
  memberships          Membership[]
  domains              Domain[]
  userPreferences      UserPreferences[]
  customRoles          CustomRole[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  Property             Property[]
}

model Membership {
  id             String       @id @default(cuid())
  role           Role
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  customRole     CustomRole?  @relation(fields: [customRoleId], references: [id])
  customRoleId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
  @@index([customRoleId])
}

model Domain {
  id             String       @id @default(cuid())
  name           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model UserPreferences {
  id                    String        @id @default(cuid())
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String        @unique
  defaultOrganization   Organization? @relation(fields: [defaultOrganizationId], references: [id], onDelete: SetNull)
  defaultOrganizationId String?
  theme                 Theme         @default(system)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([userId])
  @@index([defaultOrganizationId])
}

model CustomRole {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  permissions    Permission[] @relation("RolePermissions")
  memberships    Membership[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Permission {
  id        String      @id @default(cuid())
  role      CustomRole? @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String?
  userId    String?
  resource  String // e.g., "domains"
  actions   String[] // e.g., ["read", "create", "update", "delete"]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([roleId])
  @@index([userId])
}

model Property {
  id             String          @id @default(cuid())
  code           String          @default(nanoid(6))
  name           String
  slug           String
  type           PropertyType    @default(HOUSE)
  status         PropertyStatus  @default(DRAFT)
  highlight      HighlightStatus @default(NORMAL)
  categoryId     Int
  description    String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  images         PropertyImage[]
  features       Feature[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([slug, categoryId])
  @@unique([code, organizationId])
  @@index([organizationId])
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  isMain     Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([propertyId])
}

model Feature {
  id         Int        @id @default(autoincrement())
  name       String
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum PropertyType {
  APARTMENT
  COMMERCIAL
  HOUSE
  LAND
  ROOM_RENT
  SEASON_RENT
}

enum PropertyStatus {
  DRAFT
  ACTIVE
  INACTIVE
  UNAVAILABLE
}

enum HighlightStatus {
  NORMAL
  FEATURED
  MAIN
}
