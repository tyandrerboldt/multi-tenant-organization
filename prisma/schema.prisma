// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  preferences   UserPreferences?
  permissions   Permission[]    @relation("UserPermissions")
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  MEMBER
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum Theme {
  light
  dark
  system
}

model Organization {
  id                   String       @id @default(cuid())
  name                 String
  slug                 String       @unique
  plan                 Plan         @default(FREE)
  stripeCustomerId     String?      @unique
  stripeSubscriptionId String?      @unique
  memberships          Membership[]
  domains             Domain[]
  userPreferences     UserPreferences[]
  customRoles         CustomRole[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Membership {
  id             String       @id @default(cuid())
  role           Role
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Domain {
  id             String       @id @default(cuid())
  name           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model UserPreferences {
  id                   String       @id @default(cuid())
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String       @unique
  defaultOrganization  Organization? @relation(fields: [defaultOrganizationId], references: [id], onDelete: SetNull)
  defaultOrganizationId String?
  theme                Theme        @default(system)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@index([userId])
  @@index([defaultOrganizationId])
}

model CustomRole {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  permissions    Permission[] @relation("RolePermissions")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Permission {
  id        String      @id @default(cuid())
  role      CustomRole? @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String?
  user      User?       @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  resource  String      // e.g., "domains"
  actions   String[]    // e.g., ["read", "create", "update", "delete"]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([roleId])
  @@index([userId])
}