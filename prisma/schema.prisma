// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  passwordResetTokens PasswordResetToken[]
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  MEMBER
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

model Organization {
  id                   String       @id @default(cuid())
  name                 String
  slug                 String       @unique
  plan                 Plan         @default(FREE)
  stripeCustomerId     String?      @unique
  stripeSubscriptionId String?      @unique
  memberships          Membership[]
  domains             Domain[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Membership {
  id             String       @id @default(cuid())
  role           Role
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Domain {
  id             String       @id @default(cuid())
  name           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@index([userId])
}