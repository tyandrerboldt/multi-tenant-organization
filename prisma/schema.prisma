// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  preferences   UserPreferences?
}

enum Role {
  OWNER
  MEMBER
}

enum Plan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum Theme {
  light
  dark
  system
}

model Organization {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  plan                 Plan              @default(FREE)
  stripeCustomerId     String?           @unique
  stripeSubscriptionId String?           @unique
  memberships          Membership[]
  domains              Domain[]
  userPreferences      UserPreferences[]
  customRoles          CustomRole[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  Property             Property[]
  owners               Owner[]
}

model Membership {
  id             String       @id @default(cuid())
  role           Role
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  customRole     CustomRole?  @relation(fields: [customRoleId], references: [id])
  customRoleId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  capturedProperties Property[] @relation("PropertyCapturer")

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
  @@index([customRoleId])
}

model Domain {
  id             String       @id @default(cuid())
  name           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model UserPreferences {
  id                    String        @id @default(cuid())
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String        @unique
  defaultOrganization   Organization? @relation(fields: [defaultOrganizationId], references: [id], onDelete: SetNull)
  defaultOrganizationId String?
  theme                 Theme         @default(system)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([userId])
  @@index([defaultOrganizationId])
}

model CustomRole {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  permissions    Permission[] @relation("RolePermissions")
  memberships    Membership[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Permission {
  id        String      @id @default(cuid())
  role      CustomRole? @relation("RolePermissions", fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String?
  userId    String?
  resource  String // e.g., "domains"
  actions   String[] // e.g., ["read", "create", "update", "delete"]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([roleId])
  @@index([userId])
}


model Property {
  id              String           @id @default(cuid())
  code            String           @default(nanoid(6))
  name            String
  slug            String
  type            PropertyType     @default(HOUSE)
  status          PropertyStatus   @default(DRAFT)
  highlight       HighlightStatus  @default(NORMAL)
  categoryId      Int
  description     String
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  owner           Owner?           @relation(fields: [ownerId], references: [id])
  ownerId         String?
  capturer        Membership?      @relation("PropertyCapturer", fields: [capturerId], references: [id])
  capturerId      String?
  images          PropertyImage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  PropertyAddress PropertyAddress?
  PropertyFeature PropertyFeature?

  situation    PropertySituation?

  enableRent   Boolean            @default(false)
  enableSale   Boolean            @default(false)
  rentalValue  Decimal?
  saleValue    Decimal?

  @@unique([slug, categoryId])
  @@unique([code, organizationId])
  @@index([organizationId])
  @@index([ownerId])
  @@index([capturerId])
}

model PropertyFeature {
  id                       String   @id @default(cuid())
  property                 Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId               String   @unique
  // Apartment features
  rooms                    Int?
  bathrooms                Int?
  garageSpaces             Int?     @map("garage_spaces")
  apartmentType            String?  @map("apartment_type")
  apartmentFeatures        String[] @map("apartment_features")
  apartmentComplexFeatures String[] @map("apartment_complex_features")
  // House features
  homeType                 String?  @map("home_type")
  homeFeatures             String[] @map("home_features")
  homeComplexFeatures      String[] @map("home_complex_features")
  // Land features
  reLandType               String?  @map("re_land_type")
  reLandFeatures           String[] @map("re_land_features")
  // Commercial features
  commercialType           String?  @map("commercial_type")
  commercialFeatures       String[] @map("commercial_features")
  // Season Rent features
  beds                     Int?
  rentType                 String?  @map("rent_type")
  seasonType               String?  @map("season_type")
  seasonFeatures           String[] @map("season_features")
  // Room Rent features
  roomRentFeatures         String[] @map("room_rent_features")
  // Common features
  iptu                     Decimal?
  condominio               Decimal?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  size       Decimal? @map("size")
  totalSize  Decimal? @map("total_size")
  suites     Int?
  complement String?

  @@index([propertyId])
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  isMain     Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([propertyId])
}

// model Feature {
//   id         Int        @id @default(autoincrement())
//   name       String
//   properties Property[]
//   createdAt  DateTime   @default(now())
//   updatedAt  DateTime   @updatedAt
// }

model Owner {
  id               String       @id @default(cuid())
  name             String
  email            String
  phone            String
  alternativePhone String?
  cpf              String?
  cnpj             String?
  notes            String?
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   String
  properties       Property[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([organizationId])
}

enum PropertyType {
  APARTMENT
  COMMERCIAL
  HOUSE
  LAND
  ROOM_RENT
  SEASON_RENT
}

enum PropertyStatus {
  DRAFT
  ACTIVE
  INACTIVE
  UNAVAILABLE
}

enum HighlightStatus {
  NORMAL
  FEATURED
  MAIN
}

enum PropertySituation {
  NEW
  EXCELLENT
  GOOD
  NEEDS_RENOVATION
  LAUNCH
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  states    State[]
  addresses Address[]

  @@map("countries")
}

model State {
  id        Int       @id @default(autoincrement())
  name      String
  code      String
  country   Country   @relation(fields: [countryId], references: [id])
  countryId Int       @map("country_id")
  cities    City[]
  addresses Address[]

  @@unique([name, countryId])
  @@unique([code, countryId], name: "code_country_id")
  @@index([countryId])
  @@map("states")
}

model City {
  id            Int            @id @default(autoincrement())
  name          String
  state         State          @relation(fields: [stateId], references: [id])
  stateId       Int            @map("state_id")
  neighborhoods Neighborhood[]
  streets       Street[]
  addresses     Address[]

  @@unique([name, stateId])
  @@index([stateId])
  @@map("cities")
}

model Neighborhood {
  id        Int       @id @default(autoincrement())
  name      String
  city      City      @relation(fields: [cityId], references: [id])
  cityId    Int       @map("city_id")
  addresses Address[]

  @@unique([name, cityId])
  @@index([cityId])
  @@map("neighborhoods")
}

model Street {
  id        Int       @id @default(autoincrement())
  name      String
  city      City      @relation(fields: [cityId], references: [id])
  cityId    Int       @map("city_id")
  addresses Address[]

  @@unique([name, cityId])
  @@index([cityId])
  @@map("streets")
}

model Address {
  id                Int               @id @default(autoincrement())
  street            Street            @relation(fields: [streetId], references: [id])
  streetId          Int               @map("street_id")
  neighborhood      Neighborhood      @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId    Int               @map("neighborhood_id")
  city              City              @relation(fields: [cityId], references: [id])
  cityId            Int               @map("city_id")
  state             State             @relation(fields: [stateId], references: [id])
  stateId           Int               @map("state_id")
  country           Country           @relation(fields: [countryId], references: [id])
  countryId         Int               @map("country_id")
  zipcode           String
  propertyAddresses PropertyAddress[]

  @@unique([streetId, cityId, stateId, countryId])
  @@index([streetId])
  @@index([neighborhoodId])
  @@index([cityId])
  @@index([stateId])
  @@index([countryId])
  @@index([zipcode])
  @@map("addresses")
}

model PropertyAddress {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @unique @map("property_id")
  address    Address  @relation(fields: [addressId], references: [id])
  addressId  Int      @map("address_id")
  number     String
  complement String?

  @@index([propertyId])
  @@index([addressId])
  @@map("property_addresses")
}
